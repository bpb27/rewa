generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database/db.sqlite"
}

model actors {
  id               Int                @id @default(autoincrement())
  gender           Int
  tmdb_id          Int                @unique(map: "sqlite_autoindex_actors_1")
  name             String
  profile_path     String?
  actors_on_movies actors_on_movies[]
}

model actors_on_movies {
  id           Int     @id @default(autoincrement())
  movie_id     Int?
  actor_id     Int?
  character    String
  credit_id    String  @unique(map: "sqlite_autoindex_actors_on_movies_1")
  credit_order Int
  actors       actors? @relation(fields: [actor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movies       movies? @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([movie_id, actor_id], map: "sqlite_autoindex_actors_on_movies_2")
}

model crew {
  id             Int              @id @default(autoincrement())
  gender         Int
  tmdb_id        Int              @unique(map: "sqlite_autoindex_crew_1")
  name           String
  profile_path   String?
  crew_on_movies crew_on_movies[]
}

model crew_on_movies {
  id                   Int     @id @default(autoincrement())
  movie_id             Int?
  crew_id              Int?
  known_for_department String
  credit_id            String  @unique(map: "sqlite_autoindex_crew_on_movies_1")
  department           String
  job                  String
  crew                 crew?   @relation(fields: [crew_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movies               movies? @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([movie_id, crew_id], map: "sqlite_autoindex_crew_on_movies_2")
}

model episodes {
  id                Int                 @id @default(autoincrement())
  title             String
  episode_order     Int
  date              String
  spotify_url       String
  movie_id          Int?
  movies            movies?             @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  hosts_on_episodes hosts_on_episodes[]
}

model genres {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "sqlite_autoindex_genres_1")
  genres_on_movies genres_on_movies[]
}

model genres_on_movies {
  id       Int     @id @default(autoincrement())
  movie_id Int?
  genre_id Int?
  genres   genres? @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movies   movies? @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([movie_id, genre_id], map: "sqlite_autoindex_genres_on_movies_1")
}

model hosts {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "sqlite_autoindex_hosts_1")
  hosts_on_episodes hosts_on_episodes[]
}

model hosts_on_episodes {
  id         Int       @id @default(autoincrement())
  host_id    Int?
  episode_id Int?
  episodes   episodes? @relation(fields: [episode_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  hosts      hosts?    @relation(fields: [host_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([host_id, episode_id], map: "sqlite_autoindex_hosts_on_episodes_1")
}

model movies {
  id                             Int                              @id @default(autoincrement())
  budget                         Int
  tmdb_id                        Int                              @unique(map: "sqlite_autoindex_movies_1")
  imdb_id                        String                           @unique(map: "sqlite_autoindex_movies_2")
  overview                       String
  poster_path                    String
  release_date                   String
  revenue                        Int
  runtime                        Int
  tagline                        String
  title                          String
  actors_on_movies               actors_on_movies[]
  crew_on_movies                 crew_on_movies[]
  episodes                       episodes[]
  genres_on_movies               genres_on_movies[]
  production_companies_on_movies production_companies_on_movies[]
  streamers_on_movies            streamers_on_movies[]
}

model production_companies {
  id                             Int                              @id @default(autoincrement())
  tmdb_id                        Int                              @unique(map: "sqlite_autoindex_production_companies_1")
  name                           String
  logo_path                      String?
  production_companies_on_movies production_companies_on_movies[]
}

model production_companies_on_movies {
  id                    Int                   @id @default(autoincrement())
  movie_id              Int?
  production_company_id Int?
  production_companies  production_companies? @relation(fields: [production_company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movies                movies?               @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([movie_id, production_company_id], map: "sqlite_autoindex_production_companies_on_movies_1")
}

model streamers {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique(map: "sqlite_autoindex_streamers_1")
  tmdb_id             Int                   @unique(map: "sqlite_autoindex_streamers_2")
  logo_path           String?
  streamers_on_movies streamers_on_movies[]
}

model streamers_on_movies {
  id          Int        @id @default(autoincrement())
  movie_id    Int?
  streamer_id Int?
  streamers   streamers? @relation(fields: [streamer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movies      movies?    @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([movie_id, streamer_id], map: "sqlite_autoindex_streamers_on_movies_1")
}
